#!/usr/bin/env python3
"""
Final validation script for frequency calculation fix
"""

import sys
import os
sys.path.append('/home/bs01127/IMLI-Project')

def test_frequency_calculation():
    """Test the improved frequency calculation function"""
    
    print("ЁЯОп FINAL VALIDATION: Frequency Calculation Fix")
    print("=" * 60)
    
    # Import the function
    try:
        from app.services.category_llm_analyzer import calculate_phrase_frequency_in_articles
        print("тЬЕ Successfully imported frequency calculation function")
    except Exception as e:
        print(f"тЭМ Failed to import function: {e}")
        return False
    
    # Test case 1: Exact match
    print("\n1я╕ПтГг Testing exact phrase matching:")
    test_articles_1 = [
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржи ржкрзНрж░ржХрж▓рзНржк', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржи ржкрзНрж░ржХрж▓рзНржк'},
        {'title': 'ржЖржжрж┐ржмрж╛рж╕рзА рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржЕржзрж┐ржХрж╛рж░', 'heading': 'ржЖржжрж┐ржмрж╛рж╕рзА рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржЕржзрж┐ржХрж╛рж░'},
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА ржмрж┐рж╖ржпрж╝ржХ ржоржирзНрждрзНрж░ржгрж╛рж▓ржпрж╝', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА ржмрж┐рж╖ржпрж╝ржХ ржоржирзНрждрзНрж░ржгрж╛рж▓ржпрж╝'}
    ]
    
    result_1 = calculate_phrase_frequency_in_articles('ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА', test_articles_1)
    expected_1 = 2  # Should find 2 exact matches
    
    print(f"   Expected: {expected_1}, Got: {result_1.get('frequency', 0)}")
    print(f"   Result: {'тЬЕ PASS' if result_1.get('frequency', 0) == expected_1 else 'тЭМ FAIL'}")
    
    # Test case 2: No false positives for similar phrases
    print("\n2я╕ПтГг Testing false positive prevention:")
    test_articles_2 = [
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржи', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржи'},
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржмрзНржпржмрж╕рж╛ржпрж╝рзА ржирзГржЧрзЛрж╖рзНржарзА', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржмрзНржпржмрж╕рж╛ржпрж╝рзА ржирзГржЧрзЛрж╖рзНржарзА'},  # Words far apart
        {'title': 'ржирзГржЧрзЛрж╖рзНржарзА ржУ ржХрзНрж╖рзБржжрзНрж░ ржХрзГрж╖ржХ', 'heading': 'ржирзГржЧрзЛрж╖рзНржарзА ржУ ржХрзНрж╖рзБржжрзНрж░ ржХрзГрж╖ржХ'}     # Words far apart
    ]
    
    result_2 = calculate_phrase_frequency_in_articles('ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА', test_articles_2)
    expected_2 = 0  # Should find 0 matches (no exact phrase, only similar)
    
    print(f"   Expected: {expected_2}, Got: {result_2.get('frequency', 0)}")
    print(f"   Result: {'тЬЕ PASS' if result_2.get('frequency', 0) == expected_2 else 'тЭМ FAIL'}")
    
    # Test case 3: Proximity matching for reasonable variations
    print("\n3я╕ПтГг Testing proximity matching:")
    test_articles_3 = [
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржУ ржирзГржЧрзЛрж╖рзНржарзА ржЙржирзНржиржпрж╝ржи', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржУ ржирзГржЧрзЛрж╖рзНржарзА ржЙржирзНржиржпрж╝ржи'},  # Close words
        {'title': 'ржХрзНрж╖рзБржжрзНрж░ ржПржмржВ ржирзГржЧрзЛрж╖рзНржарзА', 'heading': 'ржХрзНрж╖рзБржжрзНрж░ ржПржмржВ ржирзГржЧрзЛрж╖рзНржарзА'},           # Close words
    ]
    
    result_3 = calculate_phrase_frequency_in_articles('ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА', test_articles_3)
    expected_3 = 2  # Should find 2 proximity matches
    
    print(f"   Expected: {expected_3}, Got: {result_3.get('frequency', 0)}")
    print(f"   Result: {'тЬЕ PASS' if result_3.get('frequency', 0) == expected_3 else 'тЭМ FAIL'}")
    
    # Summary
    all_tests_passed = (
        result_1.get('frequency', 0) == expected_1 and
        result_2.get('frequency', 0) == expected_2 and
        result_3.get('frequency', 0) == expected_3
    )
    
    print(f"\nЁЯОп FINAL RESULT: {'тЬЕ ALL TESTS PASSED' if all_tests_passed else 'тЭМ SOME TESTS FAILED'}")
    
    if all_tests_passed:
        print("\nтЬЕ FREQUENCY CALCULATION IS NOW WORKING CORRECTLY!")
        print("   - Exact phrase matching: тЬЕ")
        print("   - False positive prevention: тЬЕ") 
        print("   - Proximity matching: тЬЕ")
        print("\nЁЯЪА Ready to deploy the improved frequency calculation!")
    else:
        print("\nтЭМ Some issues still exist in frequency calculation")
        
    return all_tests_passed

if __name__ == "__main__":
    test_frequency_calculation()
