#!/usr/bin/env python3
"""
Quick test of final frequency calculation with real sample data
"""

import sys
sys.path.append('/home/bs01127/IMLI-Project')

# Import the frequency calculation function
from app.services.category_llm_analyzer import calculate_phrase_frequency_in_articles

def test_with_sample_data():
    """Test frequency calculation with sample real data patterns"""
    
    print("ЁЯзк TESTING FINAL FREQUENCY CALCULATION")
    print("=" * 50)
    
    # Sample articles that mimic real scraped data
    sample_articles = [
        {
            'title': 'ржмрж┐ржПржиржкрж┐ ржХрзНрж╖ржорждрж╛ржпрж╝ ржЧрзЗрж▓рзЗ ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржирзЗ ржкрзГржержХ ржЕржзрж┐ржжржкрзНрждрж░ ржЧржаржи ржХрж░рж╛ рж╣ржмрзЗ',
            'heading': 'ржмрж┐ржПржиржкрж┐ ржХрзНрж╖ржорждрж╛ржпрж╝ ржЧрзЗрж▓рзЗ ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзАрж░ ржЙржирзНржиржпрж╝ржирзЗ ржкрзГржержХ ржЕржзрж┐ржжржкрзНрждрж░ ржЧржаржи ржХрж░рж╛ рж╣ржмрзЗ',
            'source': 'ethnic_minorities'
        },
        {
            'title': 'ржЖржжрж┐ржмрж╛рж╕рзА рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржЕржзрж┐ржХрж╛рж░ ржУ ржкрж╛рж░рзНржмрждрзНржп ржЪржЯрзНржЯржЧрзНрж░рж╛ржорзЗрж░ рж╕рзНржерж┐рждрж┐рж╢рзАрж▓рждрж╛',
            'heading': 'ржЖржжрж┐ржмрж╛рж╕рзА рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝рзЗрж░ ржЕржзрж┐ржХрж╛рж░ ржУ ржкрж╛рж░рзНржмрждрзНржп ржЪржЯрзНржЯржЧрзНрж░рж╛ржорзЗрж░ рж╕рзНржерж┐рждрж┐рж╢рзАрж▓рждрж╛',
            'source': 'ethnic_minorities'
        },
        {
            'title': 'ржкрж╛рж░рзНржмрждрзНржп ржЪржЯрзНржЯржЧрзНрж░рж╛ржорзЗ ржЖржжрж┐ржмрж╛рж╕рзАржжрзЗрж░ ржнрзВржорж┐ ржЕржзрж┐ржХрж╛рж░ ржирж┐ржпрж╝рзЗ ржЖрж▓рзЛржЪржирж╛',
            'heading': 'ржкрж╛рж░рзНржмрждрзНржп ржЪржЯрзНржЯржЧрзНрж░рж╛ржорзЗ ржЖржжрж┐ржмрж╛рж╕рзАржжрзЗрж░ ржнрзВржорж┐ ржЕржзрж┐ржХрж╛рж░ ржирж┐ржпрж╝рзЗ ржЖрж▓рзЛржЪржирж╛',
            'source': 'ethnic_minorities'
        },
        {
            'title': 'ржУржБрж░рж╛ржУ ржирж╛рж░рзА ржирзЗрждрзНрж░рзАрж░ рж╕рж╛ржерзЗ рж╢рзБржнрзЗржЪрзНржЫрж╛ ржмрж┐ржирж┐ржоржпрж╝',
            'heading': 'ржУржБрж░рж╛ржУ ржирж╛рж░рзА ржирзЗрждрзНрж░рзАрж░ рж╕рж╛ржерзЗ рж╢рзБржнрзЗржЪрзНржЫрж╛ ржмрж┐ржирж┐ржоржпрж╝',
            'source': 'ethnic_minorities'
        }
    ]
    
    # Test phrases that should work correctly
    test_phrases = [
        ('ржХрзНрж╖рзБржжрзНрж░ ржирзГржЧрзЛрж╖рзНржарзА', 0),  # Should NOT match "ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзА"
        ('ржЖржжрж┐ржмрж╛рж╕рзА', 2),        # Should match in 2 articles
        ('ржкрж╛рж░рзНржмрждрзНржп', 2),         # Should match in 2 articles  
        ('ржУржБрж░рж╛ржУ', 1),            # Should match in 1 article
        ('ржХрзНрж╖рзБржжрзНрж░ ржЬрж╛рждрж┐ржЧрзЛрж╖рзНржарзА', 1)   # Should match exactly once
    ]
    
    for phrase, expected_count in test_phrases:
        print(f"\nЁЯзо Testing phrase: '{phrase}'")
        result = calculate_phrase_frequency_in_articles(phrase, sample_articles)
        
        actual_count = result['frequency']
        status = "тЬЕ PASS" if actual_count == expected_count else "тЭМ FAIL"
        
        print(f"   Expected: {expected_count}, Got: {actual_count}")
        print(f"   Result: {status}")
        
        if actual_count != expected_count:
            print(f"   Full result: {result}")
    
    print(f"\nЁЯОп FINAL TEST COMPLETED!")

if __name__ == "__main__":
    test_with_sample_data()
