#!/usr/bin/env python3
"""Test script to verify LLM trending words are saved to database"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from app.db.database import SessionLocal, engine
from app.models.word import TrendingPhrase, Base
from app.routes.helpers import save_llm_trending_words_to_db
from datetime import date

def test_llm_save():
    """Test the LLM trending words save functionality"""
    print("üß™ Testing LLM trending words database save...")
    
    # Create tables if they don't exist
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    try:
        # Clear any existing LLM generated data for today
        today = date.today()
        db.query(TrendingPhrase).filter(
            TrendingPhrase.source == 'llm_generated',
            TrendingPhrase.date == today
        ).delete()
        db.commit()
        
        # Test sample LLM response
        test_response = """
1. ‡¶á‡¶∏‡¶∞‡¶æ‡¶Ø‡¶º‡ßá‡¶≤-‡¶á‡¶∞‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ò‡¶æ‡¶§
2. ‡¶ú‡ßç‡¶¨‡¶æ‡¶≤‡¶æ‡¶®‡¶ø ‡¶∏‡¶Ç‡¶ï‡¶ü  
3. ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡¶£‡¶æ
4. ‡¶¨‡¶®‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø
5. ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶æ‡¶∞
6. ‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶Æ‡¶®‡ßç‡¶¶‡¶æ
7. ‡¶ï‡¶∞‡ßã‡¶®‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶ï‡¶∏‡¶ø‡¶®
8. ‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶ï‡¶æ‡¶™
9. ‡¶∞‡¶æ‡¶ú‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ï‡¶ü
10. ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶Ø‡¶º‡¶®
        """
        
        print(f"üìù Test LLM response:")
        print(test_response)
        
        # Test the save function
        save_llm_trending_words_to_db(db, test_response, today, limit=10)
        
        # Verify saved data
        llm_phrases = db.query(TrendingPhrase).filter(
            TrendingPhrase.source == 'llm_generated',
            TrendingPhrase.date == today
        ).all()
        
        print(f"\n‚úÖ Successfully saved {len(llm_phrases)} LLM phrases to database:")
        for i, phrase in enumerate(llm_phrases, 1):
            print(f"  {i}. {phrase.phrase} (score: {phrase.score}, type: {phrase.phrase_type})")
        
        # Test retrieval through trending analysis endpoints
        print(f"\nüîç Testing retrieval of saved LLM words...")
        
        # Check if they appear in daily trending
        all_today_phrases = db.query(TrendingPhrase).filter(
            TrendingPhrase.date == today
        ).order_by(TrendingPhrase.score.desc()).all()
        
        print(f"üìä Total phrases for today: {len(all_today_phrases)}")
        if all_today_phrases:
            print("Top 5 phrases (all sources):")
            for phrase in all_today_phrases[:5]:
                print(f"  - {phrase.phrase} (source: {phrase.source}, score: {phrase.score})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        db.close()

if __name__ == "__main__":
    success = test_llm_save()
    if success:
        print("\nüéâ Test completed successfully!")
    else:
        print("\nüí• Test failed!")
