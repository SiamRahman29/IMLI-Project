#!/usr/bin/env python3
"""
Test script to verify category integration in the LLM text processing pipeline
"""

import sys
import os
sys.path.insert(0, '.')

from app.routes.helpers import optimize_text_for_ai_analysis_with_categories, detect_category_from_url
from app.services.advanced_bengali_nlp import TrendingBengaliAnalyzer

def test_category_integration():
    """Test if category system is working in text optimization"""
    
    print("üß™ Testing Category Integration in LLM Pipeline")
    print("=" * 60)
    
    # Initialize analyzer
    analyzer = TrendingBengaliAnalyzer()
    
    # Create sample articles with metadata (similar to actual pipeline)
    sample_articles = [
        {
            'url': 'https://www.prothomalo.com/politics/something',
            'title': '‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶®‡ßÄ‡¶§‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ',
            'content': '‡¶∞‡¶æ‡¶ú‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶ú ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
            'source': 'prothom-alo'
        },
        {
            'url': 'https://www.prothomalo.com/sports/cricket',
            'title': '‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤',
            'content': '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßá‡¶®‡ßç‡¶∏‡•§',
            'source': 'prothom-alo'
        },
        {
            'url': 'https://www.prothomalo.com/business/economy',
            'title': '‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¶‡¶ø‡¶ï',
            'content': '‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø‡¶§‡ßá ‡¶á‡¶§‡¶ø‡¶¨‡¶æ‡¶ö‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§',
            'source': 'prothom-alo'
        },
        {
            'url': 'https://www.prothomalo.com/technology/latest',
            'title': '‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶â‡¶¶‡ßç‡¶≠‡¶æ‡¶¨‡¶®',
            'content': '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø‡•§',
            'source': 'prothom-alo'
        }
    ]
    
    print(f"üìä Testing with {len(sample_articles)} sample articles")
    print()
    
    # Test individual category detection
    print("1Ô∏è‚É£ Testing Individual Category Detection:")
    for i, article in enumerate(sample_articles, 1):
        category = detect_category_from_url(article['url'], article.get('title', ''))
        print(f"   {i}. URL: {article['url']}")
        print(f"      Title: {article['title']}")
        print(f"      Detected Category: {category}")
        # Add category to article for next test
        article['category'] = category
        print()
    
    # Test category-aware text optimization
    print("2Ô∏è‚É£ Testing Category-Aware Text Optimization:")
    optimized_text = optimize_text_for_ai_analysis_with_categories(
        sample_articles, 
        analyzer, 
        max_chars=2000,
        max_articles=10,
        enable_categories=True
    )
    
    print(f"üìÑ Optimized Text Length: {len(optimized_text)} chars")
    print(f"üìÑ Category-optimized Text:")
    print("-" * 50)
    print(optimized_text)
    print("-" * 50)
    print()
    
    # Check if categories are present in the output
    categories_found = []
    expected_categories = ['‡¶∞‡¶æ‡¶ú‡¶®‡ßÄ‡¶§‡¶ø', '‡¶ñ‡ßá‡¶≤‡¶æ‡¶ß‡ßÅ‡¶≤‡¶æ', '‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø', '‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø']
    
    for cat in expected_categories:
        if cat in optimized_text:
            categories_found.append(cat)
    
    print("3Ô∏è‚É£ Category Analysis Results:")
    print(f"   Expected Categories: {expected_categories}")
    print(f"   Found in Output: {categories_found}")
    print(f"   Success Rate: {len(categories_found)}/{len(expected_categories)} ({len(categories_found)/len(expected_categories)*100:.1f}%)")
    
    # Test if the format matches LLM expected input
    print()
    print("4Ô∏è‚É£ LLM Input Format Verification:")
    if " | " in optimized_text:
        sections = optimized_text.split(" | ")
        print(f"   ‚úÖ Text properly formatted with {len(sections)} category sections")
        for i, section in enumerate(sections, 1):
            category_name = section.split(":")[0] if ":" in section else "Unknown"
            print(f"      Section {i}: {category_name}")
    else:
        print(f"   ‚ùå Text not properly formatted for categories")
    
    print()
    print("=" * 60)
    if len(categories_found) >= len(expected_categories) * 0.75:
        print("‚úÖ CATEGORY INTEGRATION TEST: PASSED")
    else:
        print("‚ùå CATEGORY INTEGRATION TEST: FAILED")
    print("=" * 60)

if __name__ == "__main__":
    test_category_integration()
