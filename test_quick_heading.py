#!/usr/bin/env python3
"""
Quick test to verify heading extraction without full API call
"""

import sys
import os
sys.path.append('/home/bs01127/IMLI-Project')

def test_heading_extraction_quick():
    """Test heading extraction logic directly"""
    print("üß™ Quick Test: Bengali Heading Extraction & Comma Separation")
    print("=" * 60)
    
    try:
        # Import required modules
        from app.routes.helpers import optimize_text_for_ai_analysis
        from app.services.advanced_bengali_nlp import TrendingBengaliAnalyzer
        
        # Sample Bengali headings (like what we get from scrapers)
        sample_headings = [
            "‡¶∏‡¶æ‡¶¨‡ßá‡¶ï ‡¶∏‡¶ø‡¶á‡¶∏‡¶ø ‡¶®‡ßÇ‡¶∞‡ßÅ‡¶≤ ‡¶π‡ßÅ‡¶¶‡¶æ‡¶∞ ‡ßß‡ß¶ ‡¶¶‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶Ø‡¶º ‡¶™‡ßÅ‡¶≤‡¶ø‡¶∂",
            "‡¶á‡¶∞‡¶æ‡¶®‡ßá‡¶∞ ‡¶õ‡¶Ø‡¶º ‡¶¨‡¶ø‡¶Æ‡¶æ‡¶®‡¶¨‡¶®‡ßç‡¶¶‡¶∞‡ßá ‡¶Ö‡¶§‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶π‡¶æ‡¶Æ‡¶≤‡¶æ ‡¶¨‡¶π‡ßÅ ‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß‡¶¨‡¶ø‡¶Æ‡¶æ‡¶® ‡¶ß‡ßç‡¶¨‡¶Ç‡¶∏",
            "‡¶™‡¶æ‡¶≤‡ßç‡¶ü‡¶æ ‡¶π‡¶æ‡¶Æ‡¶≤‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶á‡¶∞‡¶æ‡¶® ‡¶¶‡¶ø‡¶ó‡ßç‡¶¨‡¶ø‡¶¶‡¶ø‡¶ï ‡¶õ‡ßÅ‡¶ü‡¶õ‡ßá ‡¶á‡¶∏‡¶∞‡¶æ‡¶Ø‡¶º‡ßá‡¶≤‡¶ø‡¶∞‡¶æ",
            "‡¶ö‡ßÄ‡¶® ‡¶∏‡¶´‡¶∞‡ßá ‡¶ï‡ßÄ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶π‡¶¨‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶≤‡ßá‡¶® ‡¶´‡¶ñ‡¶∞‡ßÅ‡¶≤",
            "‡¶ò‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡ßá‡¶∞‡¶§ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶á‡¶â‡¶è‡¶®‡¶ì'‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®",
            "‡¶∏‡ßç‡¶¨‡¶ú‡¶® ‡¶≠‡ßá‡¶¨‡ßá ‡¶≤‡¶æ‡¶∂ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶≤‡ßá‡¶® ‡¶ó‡ßã‡¶∏‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶≤‡ßá‡¶® ‡¶è‡¶∞‡¶™‡¶∞ ‡¶Ø‡¶æ ‡¶ò‡¶ü‡¶≤"
        ]
        
        print(f"üì∞ Sample Input Headings ({len(sample_headings)} headings):")
        for i, heading in enumerate(sample_headings, 1):
            print(f"  {i}. {heading}")
        
        # Initialize analyzer
        analyzer = TrendingBengaliAnalyzer()
        
        # Test the optimization function
        print(f"\nüîß Testing optimize_text_for_ai_analysis()...")
        optimized_text = optimize_text_for_ai_analysis(sample_headings, analyzer, max_chars=500, max_articles=10)
        
        print(f"\n‚úÖ Optimized Result:")
        print(f"üìä Length: {len(optimized_text)} characters")
        print(f"üìÑ Content: {optimized_text}")
        
        # Check comma separation
        separated_parts = optimized_text.split(', ')
        print(f"\nüîç Comma Separation Analysis:")
        print(f"üìù Total parts: {len(separated_parts)}")
        print(f"üìã Individual parts:")
        for i, part in enumerate(separated_parts, 1):
            print(f"  {i}. {part}")
        
        # Check Bengali content
        import re
        bengali_words = re.findall(r'[\u0980-\u09FF]+', optimized_text)
        print(f"\nüìù Bengali Words Found: {len(bengali_words)}")
        print(f"üî§ Sample words: {bengali_words[:8]}")
        
        # Verify requirements
        print(f"\n‚úÖ Requirements Verification:")
        print(f"  1. Complete headings preserved: {'‚úÖ' if len(separated_parts[0].split()) > 3 else '‚ùå'}")
        print(f"  2. Only headings (no titles): ‚úÖ (tested with heading-only input)")
        print(f"  3. Comma separation: {'‚úÖ' if ',' in optimized_text else '‚ùå'}")
        print(f"  4. Readable separation: {'‚úÖ' if len(separated_parts) > 1 else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_heading_extraction_quick()
